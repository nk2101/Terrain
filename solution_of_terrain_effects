function sortUnits(units, terrains) {
  const terrainEffects = getTerrainEffects();
  const parsedUnits = parseUnits(units);
  const unitPerformances = calculateUnitPerformances(parsedUnits, terrains, terrainEffects);
  const sortedUnits = sortUnitsByPerformance(unitPerformances);
  return formatSortedUnits(sortedUnits);
}

function getTerrainEffects() {
  return {
    Hill: {
      CavalryArcher: 2,
      FootArcher: 2,
      Militia: 0.5,
      Spearmen: 0.5,
      LightCavalry: 0.5,
      HeavyCavalry: 0.5,
    },
    Plains: {
      CavalryArcher: 2,
      LightCavalry: 2,
      HeavyCavalry: 2,
      Militia: 1,
      Spearmen: 1,
      FootArcher: 1,
    },
    Muddy: {
      FootArcher: 2,
      Militia: 2,
      Spearmen: 2,
      CavalryArcher: 1,
      LightCavalry: 1,
      HeavyCavalry: 1,
    },
    Default: {
      Militia: 1,
      Spearmen: 1,
      FootArcher: 1,
      LightCavalry: 1,
      HeavyCavalry: 1,
      CavalryArcher: 1,
    },
  };
}

function parseUnits(units) {
  return units.map((unit) => {
    const [unitClass, count] = unit.split("#");
    return { unitClass, count: Number(count) };
  });
}

function calculateUnitPerformances(parsedUnits, terrains, terrainEffects) {
  return parsedUnits.map((unit) => {
    const performance = terrains.reduce((acc, terrain) => {
      const effect = terrainEffects[terrain] || terrainEffects.Default;
      return acc + (effect[unit.unitClass] || 1) * unit.count;
    }, 0);
    return { ...unit, performance };
  });
}

function sortUnitsByPerformance(unitPerformances) {
  return unitPerformances.sort((a, b) => b.performance - a.performance);
}

function formatSortedUnits(sortedUnits) {
  return sortedUnits.map((unit) => `${unit.unitClass}#${unit.count}`);
}

const units = ["Militia#10", "FootArcher#5", "HeavyCavalry#5", "Spearmen#10", "LightCavalry#100"];
const terrains = ["Plains", "Default", "Default", "Default", "Default"];
console.log(sortUnits(units, terrains));
